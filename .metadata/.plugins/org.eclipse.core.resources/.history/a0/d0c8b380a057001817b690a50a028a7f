import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;
import java.util.List; // resolves problem with java.awt.List and java.util.List

/**
 * A class that represents a picture.  This class inherits from 
 * SimplePicture and allows the student to add functionality to
 * the Picture class.  
 * 
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture 
{
  ///////////////////// constructors //////////////////////////////////
  
  /**
   * Constructor that takes no arguments 
   */
  public Picture ()
  {
    /* not needed but use it to show students the implicit call to super()
     * child constructors always call a parent constructor 
     */
    super();  
  }
  
  /**
   * Constructor that takes a file name and creates the picture 
   * @param fileName the name of the file to create the picture from
   */
  public Picture(String fileName)
  {
    // let the parent class handle this fileName
    super(fileName);
    System.out.println("Larry Yan\t\tPeriod 2\n4/24/2018\t\tComputer 20");
  }
  
  /**
   * Constructor that takes the width and height
   * @param height the height of the desired picture
   * @param width the width of the desired picture
   */
  public Picture(int height, int width)
  {
    // let the parent class handle this width and height
	  super(width,height);
  }
  
  /**
   * Constructor that takes a picture and creates a 
   * copy of that picture
   * @param copyPicture the picture to copy
   */
  public Picture(Picture copyPicture)
  {
    // let the parent class do the copy
    super(copyPicture);
  }
  
  /**
   * Constructor that takes a buffered image
   * @param image the buffered image to use
   */
  public Picture(BufferedImage image)
  {
    super(image);
  }
  
  ////////////////////// methods ///////////////////////////////////////
//  
//  /**
//   * Method to return a string with information about this picture.
//   * @return a string with information about the picture such as fileName,
//   * height and width.
//   */
//  public String toString()
//  {
//    String output = "Picture, filename " + getFileName() + 
//      " height " + getHeight() 
//      + " width " + getWidth();
//    return output;
//    
//  }
//  
//  /** Method to set the blue to 0 */
//  public void zeroBlue()
//  {
//    Pixel[][] pixels = this.getPixels2D();
//    for (Pixel[] rowArray : pixels)
//    {
//      for (Pixel pixelObj : rowArray)
//      {
//        pixelObj.setBlue(0);
//      }
//    }
//  }
//  
//  public void keepOnlyBlue()
//  {
//    Pixel[][] pixels = this.getPixels2D();
//    for (Pixel[] rowArray : pixels)
//    {
//      for (Pixel pixelObj : rowArray)
//      {
//        pixelObj.setRed(0);
//        pixelObj.setGreen(0);
//      }
//    }
//  }
//  public void keepOnlyRed()
//  {
//    Pixel[][] pixels = this.getPixels2D();
//    for (Pixel[] rowArray : pixels)
//    {
//      for (Pixel pixelObj : rowArray)
//      {
//        pixelObj.setBlue(0);
//        pixelObj.setGreen(0);
//      }
//    }
//  }
//  public void keepOnlyGreen()
//  {
//    Pixel[][] pixels = this.getPixels2D();
//    for (Pixel[] rowArray : pixels)
//    {
//      for (Pixel pixelObj : rowArray)
//      {
//        pixelObj.setRed(0);
//        pixelObj.setBlue(0);
//      }
//    }
//  }
//  public void negate()
//  {
//    Pixel[][] pixels = this.getPixels2D();
//    for (Pixel[] rowArray : pixels)
//    {
//      for (Pixel pixelObj : rowArray)
//      {
//    	pixelObj.setRed(255-pixelObj.getRed());
//    	pixelObj.setGreen(255-pixelObj.getGreen());
//        pixelObj.setBlue(255-pixelObj.getBlue());
//      }
//    }
//  }
//  public void grayscale()
//  {
//    Pixel[][] pixels = this.getPixels2D();
//    for (Pixel[] rowArray : pixels)
//    {
//      for (Pixel pixelObj : rowArray)
//      {
//    	  int avg = (pixelObj.getRed()+pixelObj.getGreen()+pixelObj.getBlue())/3;
//    	pixelObj.setRed(avg);
//    	pixelObj.setGreen(avg);
//    	pixelObj.setBlue(avg);
//
//      }
//    }
//  }
//  public void increaseContrast()	//from zachary
//	{
//		Pixel[][] pixels = this.getPixels2D();
//		long total = 0;
//		int num = 0;
//		for (Pixel[] rowArray : pixels)
//		{
//			for (Pixel pixelObj : rowArray)
//			{
//				int ave = (pixelObj.getBlue() + pixelObj.getRed() + pixelObj.getGreen())/ 3;
//				total += ave;
//				num++;
//			}
//		}
//		int ave = (int) (total = total/num);
//		for (Pixel[] rowArray : pixels)
//		{
//			for (Pixel pixelObj : rowArray)
//			{
//				pixelObj.setBlue(2 * (pixelObj.getBlue() - ave));
//				pixelObj.setRed(2 * (pixelObj.getRed() - ave));
//				pixelObj.setGreen(2 * (pixelObj.getGreen() - ave));
//			}
//		}
//	}
//
//public void fixUnderwater()
//{
//	increaseContrast();
//}
//  /** Method that mirrors the picture around a 
//    * vertical mirror in the center of the picture
//    * from left to right */
//  public void mirrorVertical()
//  {
//    Pixel[][] pixels = this.getPixels2D();
//    Pixel leftPixel = null;
//    Pixel rightPixel = null;
//    int width = pixels[0].length;
//    for (int row = 0; row < pixels.length; row++)
//    {
//      for (int col = 0; col < width / 2; col++)
//      {
//        leftPixel = pixels[row][col];
//        rightPixel = pixels[row][width - 1 - col];
//        rightPixel.setColor(leftPixel.getColor());
//      }
//    } 
//  }
//  public void mirrorVerticalRightToLeft()
//  {
//    Pixel[][] pixels = this.getPixels2D();
//    Pixel leftPixel = null;
//    Pixel rightPixel = null;
//    int width = pixels[0].length;
//    for (int row = 0; row < pixels.length; row++)
//    {
//      for (int col = 0; col < width / 2; col++)
//      {
//        leftPixel = pixels[row][col];
//        rightPixel = pixels[row][width - 1 - col];
//        leftPixel.setColor(rightPixel.getColor());
//      }
//    } 
//  }
//  
//  public void mirrorHorizontal()
//  {
//    Pixel[][] pixels = this.getPixels2D();
//    Pixel tPixel = null;
//    Pixel bPixel = null;
//    int height = pixels.length;
//    for (int c = 0; c < pixels[0].length; c++)
//    {
//      for (int r = 0; r < height / 2; r++)
//      {
//        tPixel = pixels[r][c];
//        bPixel = pixels[height - 1- r][c];
//        bPixel.setColor(tPixel.getColor());
//      }
//    } 
//  }
//  
//  public void mirrorHorizontalBotToTop()
//  {
//    Pixel[][] pixels = this.getPixels2D();
//    Pixel tPixel = null;
//    Pixel bPixel = null;
//    int height = pixels.length;
//    for (int c = 0; c < pixels[0].length; c++)
//    {
//      for (int r = 0; r < height / 2; r++)
//      {
//        tPixel = pixels[r][c];
//        bPixel = pixels[height - 1- r][c];
//        tPixel.setColor(bPixel.getColor());
//      }
//    } 
//  }
//  
//  public void mirrorDiagonal()
//  {
//    Pixel[][] pixels = this.getPixels2D();
//    Pixel trPixel = null;
//    Pixel blPixel = null;
//    
//    int num;
//    if (pixels[0].length>pixels.length) num=pixels.length;
//    else num=pixels[0].length;
//    for (int c1 = 0; c1 < num; c1++)
//    {
//      for (int c2 = 0; c2 < num; c2++)
//      {
//        trPixel = pixels[c1][c2];
//        blPixel = pixels[c2][c1];
//        trPixel.setColor(blPixel.getColor());
//      }
//    } 
//  }
//  
//  /** Mirror just part of a picture of a temple */
//  public void mirrorTemple()
//  {
//    int mirrorPoint = 276;
//    Pixel leftPixel = null;
//    Pixel rightPixel = null;
//    int count = 0;
//    Pixel[][] pixels = this.getPixels2D();
//    
//    // loop through the rows
//    for (int row = 27; row < 97; row++)
//    {
//      // loop from 13 to just before the mirror point
//      for (int col = 13; col < mirrorPoint; col++)
//      {
//        
//        leftPixel = pixels[row][col];      
//        rightPixel = pixels[row]                       
//                         [mirrorPoint - col + mirrorPoint];
//        rightPixel.setColor(leftPixel.getColor());
//      }
//    }
//  }
//  
//  public void mirrorArms()
//  {
//    int mirrorPoint = 194;
//    Pixel leftPixel = null;
//    Pixel rightPixel = null;
//    int count = 0;
//    Pixel[][] pixels = this.getPixels2D();
//    
//    // loop through the rows
//    for (int row = 162; row < mirrorPoint; row++)
//    {
//      // loop from 13 to just before the mirror point
//      for (int col = 106; col < 293; col++)
//      {
//        
//        leftPixel = pixels[row][col];      
//        rightPixel = pixels[mirrorPoint - row + mirrorPoint]                       
//                         [col];
//        rightPixel.setColor(leftPixel.getColor());
//      }
//    }
//  }
//  
//  public void mirrorGull()
//  {
//	    int mirrorPoint = 345;
//	    Pixel leftPixel = null;
//	    Pixel rightPixel = null;
//	    int count = 0;
//	    Pixel[][] pixels = this.getPixels2D();
//	    
//	    // loop through the rows
//	    for (int row = 234; row < 320; row++)
//	    {
//	      // loop from 13 to just before the mirror point
//	      for (int col = 233; col < mirrorPoint; col++)
//	      {
//	        
//	        leftPixel = pixels[row][col];      
//	        rightPixel = pixels[row]                       
//	                         [Math.abs(mirrorPoint - col) + mirrorPoint];
//	        rightPixel.setColor(leftPixel.getColor());
//	      }
//	    }
//	  }
//  
//  /** copy from the passed fromPic to the
//    * specified startRow and startCol in the
//    * current picture
//    * @param fromPic the picture to copy from
//    * @param startRow the start row to copy to
//    * @param startCol the start col to copy to
//    */
//  public void copy(Picture fromPic, 
//                 int startRow, int startCol)
//  {
//    Pixel fromPixel = null;
//    Pixel toPixel = null;
//    Pixel[][] toPixels = this.getPixels2D();
//    Pixel[][] fromPixels = fromPic.getPixels2D();
//    for (int fromRow = 0, toRow = startRow; 
//         fromRow < fromPixels.length &&
//         toRow < toPixels.length; 
//         fromRow++, toRow++)
//    {
//      for (int fromCol = 0, toCol = startCol; 
//           fromCol < fromPixels[0].length &&
//           toCol < toPixels[0].length;  
//           fromCol++, toCol++)
//      {
//        fromPixel = fromPixels[fromRow][fromCol];
//        toPixel = toPixels[toRow][toCol];
//        toPixel.setColor(fromPixel.getColor());
//      }
//    }   
//  }
//
//  /** Method to create a collage of several pictures */
//  public void createCollage()
//  {
//    Picture flower1 = new Picture("flower1.jpg");
//    Picture flower2 = new Picture("flower2.jpg");
//    this.copy(flower1,0,0);
//    this.copy(flower2,100,0);
//    this.copy(flower1,200,0);
//    Picture flowerNoBlue = new Picture(flower2);
//    flowerNoBlue.zeroBlue();
//    this.copy(flowerNoBlue,300,0);
//    this.copy(flower1,400,0);
//    this.copy(flower2,500,0);
//    this.mirrorVertical();
//    this.write("collage.jpg");
//  }
//  
//  
//  /** Method to show large changes in color 
//    * @param edgeDist the distance for finding edges
//    */
//  public void edgeDetection(int edgeDist)
//  {
//    Pixel leftPixel = null;
//    Pixel rightPixel = null;
//    Pixel[][] pixels = this.getPixels2D();
//    Color rightColor = null;
//    for (int row = 0; row < pixels.length; row++)
//    {
//      for (int col = 0; 
//           col < pixels[0].length-1; col++)
//      {
//        leftPixel = pixels[row][col];
//        rightPixel = pixels[row][col+1];
//        rightColor = rightPixel.getColor();
//        if (leftPixel.colorDistance(rightColor) > 
//            edgeDist)
//          leftPixel.setColor(Color.BLACK);
//        else
//          leftPixel.setColor(Color.WHITE);
//      }
//    }
//  }
//  
//  public void edgeDetection2(int edgeDist)
//  {
//    Pixel leftPixel = null;
//    Pixel[][] pixels = this.getPixels2D();
//    Color rightColor = null;
//    for (int row = 0; row < pixels.length-1; row++)
//    {
//      for (int col = 0; 
//           col < pixels[0].length-1; col++)
//      {
//        leftPixel = pixels[row][col];
//        if (leftPixel.colorDistance(pixels[row][col+1].getColor()) > 
//            edgeDist
//            ||leftPixel.colorDistance(pixels[row+1][col].getColor()) > edgeDist)
//          leftPixel.setColor(Color.BLACK);
//        else
//          leftPixel.setColor(Color.WHITE);
//      }
//      if (leftPixel.colorDistance(pixels[row][pixels[row].length-1].getColor()) > 
//      edgeDist)
//    	  leftPixel.setColor(Color.BLACK);
//      else
//    	  leftPixel.setColor(Color.WHITE);
//      }
//    for (int col = 0; 
//            col < pixels[0].length-1; col++)
//       {
//         leftPixel = pixels[pixels.length-1][col];
//         if (leftPixel.colorDistance(pixels[pixels.length-1][col+1].getColor()) > 
//             edgeDist)
//           leftPixel.setColor(Color.BLACK);
//         else
//           leftPixel.setColor(Color.WHITE);
//       }
//  }
  
//  public void sharpen(int x, int y, int w, int h) {
//	//assuming that x and y are on the page, as with w and h
//	  
//	  Pixel toSharp, upperLeft; 
//	  Pixel[][] pixels = this.getPixels2D();
//	  
//	  int r, g, b;
//	  
//	  for (int j=x+w-1; j>=x; j--) {
//		  for (int i=y+h-1; i>=y; i--) {
//
//			  if (i==0||y==0) break;
//			  
//			  toSharp=pixels[i][j];
//			  upperLeft=pixels[i-1][j-1];
//			  
//			  r=toSharp.getRed()+(int)(0.5*(toSharp.getRed()-upperLeft.getRed()));
//			  g=toSharp.getGreen()+(int)(0.5*(toSharp.getGreen()-upperLeft.getGreen()));
//			  b=toSharp.getBlue()+(int)(0.5*(toSharp.getBlue()-upperLeft.getBlue()));
//			  
//			  if (r>255) r=255;
//			  if (g>255) g=255;
//			  if (b>255) b=255;
//			  if (r<0) r=0;
//			  if (g<0) g=0;
//			  if (b<0) b=0;
//			  
//			  toSharp.setRed(r);
//			  toSharp.setGreen(g);
//			  toSharp.setBlue(b);
//		  }
//	  }
//  }
  
  public void encode(Picture message) {
	  
	  Pixel[][] messagePixels = message.getPixels2D();
	  Pixel[][] currPixels = this.getPixels2D();
	  Pixel currPixel = null;
	  Pixel messagePixel = null;
	  if (message.getHeight()/3+1>this.getHeight()||message.getWidth()/3+1>this.getWidth()) {
		  System.out.println("Error: message image too large.");
		  return;
	  }
	  for (int r=0; r<message.getHeight()/3+1; r++) {
		  for (int c=0; c<message.getHeight()/3+1; c++) {
			  currPixel=currPixels[r][c];
			  currPixel.setRed(currPixel.getRed()-currPixel.getRed()%8);
			  currPixel.setGreen(currPixel.getGreen()-currPixel.getGreen()%8);
			  currPixel.setBlue(currPixel.getBlue()-currPixel.getBlue()%8);
//			  currPixel.setRed(255);
		  }
	  }
	  for (int r=0; r<message.getHeight(); r++) {
		  for (int c=0; c<message.getHeight(); c++) {
			  messagePixel=messagePixels[r][c];
			  currPixel=currPixels[r/3][c/3];
			  if (messagePixel.colorDistance(Color.BLACK)<50) {
				  if (r%3==0) {
					  currPixel.setRed(currPixel.getRed()+thing(c));
				  } else if (r%3==1) {
					  currPixel.setGreen(currPixel.getGreen()+thing(c));
				  } else {
					  currPixel.setBlue(currPixel.getBlue()+thing(c));
				  }
			  }
		  }
	  }
  }
  
  public int thing(int a) {
	  if (a%3==0) {
		  return 1;
	  } else if (a%3==1){
		  return 2;
	  } else {
		  return 4;
	  }
  }
  
  public Picture decode() {
	  Pixel[][] pixels = this.getPixels2D();
	  Pixel currPixel = null;
	  Pixel messagePixel = null;
	  Picture messagePicture = new Picture(this.getHeight()*3, this.getWidth()*3);
	  Pixel[][] messagePixels = messagePicture.getPixels2D();
	  for (int r=0; r<this.getHeight(); r++) {
		  for (int c=0; c<this.getWidth(); c++) {
			  currPixel=pixels[r][c];
			  messagePixel=messagePixels[r*2][c*3];
			  if (currPixel.getRed()%2==1) {
				  messagePixels[r*3][c*3].setColor(Color.BLACK);
			  }
			  if (currPixel.getRed()%4>=2) {
				  messagePixels[r*3][c*3+1].setColor(Color.BLACK);
			  }
			  if (currPixel.getRed()%8>=4) {
				  messagePixels[r*3][c*3+2].setColor(Color.BLACK);
			  }
			  if (currPixel.getGreen()%2==1) {
				  messagePixels[r*3+1][c*3].setColor(Color.BLACK);
			  }
			  if (currPixel.getGreen()%4>=2) {
				  messagePixels[r*3+1][c*3+1].setColor(Color.BLACK);
			  }
			  if (currPixel.getGreen()%8>=4) {
				  messagePixels[r*3+1][c*3+2].setColor(Color.BLACK);
			  }
			  if (currPixel.getBlue()%2==1) {
				  messagePixels[r*3+2][c*3].setColor(Color.BLACK);
			  }
			  if (currPixel.getBlue()%4>=2) {
				  messagePixels[r*3+2][c*3+1].setColor(Color.BLACK);
			  }
			  if (currPixel.getBlue()%8>=4) {
				  messagePixels[r*3+2][c*3+2].setColor(Color.BLACK);
			  }
		  }
	  }
	  return messagePicture;
  }
  
  /* Main method for testing - each class in Java can have a main 
   * method 
   */
//  public static void main(String[] args) 
//  {
//    Picture beach = new Picture("beach.jpg");
//    beach.explore();
//    beach.zeroBlue();
//    beach.explore();
//  }
  
} // this } is the end of class Picture, put all new methods before this
